-- Транзакции, переменные, представления. Администрирование. Хранимые процедуры и функции, триггеры


-- 1. Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения и добавить необходимые индексы

-- Ищут пользователей по имени и фамилии
CREATE INDEX first_last_name_idx ON users(first_name, last_name);

-- Часто ищут пользователей по телефону или email
CREATE INDEX users_email_idx ON users(email);
CREATE INDEX users_phone_idx ON users(phone);

-- Также могут искать пользователей по городу их проживания
CREATE INDEX profiles_city_idx ON profiles(city);

-- Можно искать необходимую информацию в сообщениях или постах
CREATE INDEX messages_body_idx ON messages(body(10));
CREATE INDEX posts_body_idx ON posts(body(10));

-- Можно искать группы по их названию
CREATE INDEX communities_idx ON communities(name);



-- 2. Задание на оконные функции
-- Построить запрос, который будет выводить следующие столбцы: -- имя группы -- среднее количество пользователей 
-- в группах -- самый молодой пользователь в группе -- самый старший пользователь в группе -- общее количество пользователей
-- в группе -- всего пользователей в системе -- отношение в процентах 
-- (общее количество пользователей в группе / всего пользователей в системе) * 100


-- проверить эту функцию
SELECT DISTINCT communities.name,
	COUNT(communities_users.user_id) OVER() 
	    / (SELECT COUNT(*) FROM communities) AS avg_users_in_groups, -- среднее количество пользователей в группах
	FIRST_VALUE(CONCAT_WS(" ", users.first_name, users.last_name)) OVER w_community_birthday_desc AS youngest, -- самый молодой пользователь в группе
        FIRST_VALUE(CONCAT_WS(" ", users.first_name, users.last_name)) OVER w_community_birthday_asc AS oldest, -- самый старший пользователь в группе
	-- MIN(YEAR(CURRENT_TIMESTAMP) - YEAR(profiles.birthday)) OVER(PARTITION BY communities_users.community_id) AS min_1,
	-- MAX(YEAR(CURRENT_TIMESTAMP) - YEAR(profiles.birthday)) OVER(PARTITION BY communities_users.community_id) AS max_1,
        COUNT(communities_users.user_id) OVER w_community AS users_in_group, -- общее количество пользователей в группе
	(SELECT COUNT(*) FROM users) AS users_total, -- всего пользователей в системе
	-- COUNT(profiles.user_id) OVER() AS all_users,
	COUNT(communities_users.user_id) OVER w_community / (SELECT COUNT(*) FROM users) *100 AS '%%' -- отношение в процентах (общее количество пользователей в группе /  всего пользователей в системе) * 100
	FROM communities
      		LEFT JOIN communities_users ON communities_users.community_id = communities.id
      		LEFT JOIN users ON communities_users.user_id = users.id
      		LEFT JOIN profiles ON profiles.user_id = users.id
      		WINDOW w_community AS (PARTITION BY communities.id),
             		w_community_birthday_desc AS (PARTITION BY communities.id ORDER BY profiles.birthday DESC),
             		w_community_birthday_asc AS (PARTITION BY communities.id ORDER BY profiles.birthday);



--Ответ показан в 2.png


