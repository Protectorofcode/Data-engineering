-- Описание
-- Здесь представлена база данных Госпиталя. Таблица people содержит общую информацию о всех людях.
-- Таблицы patient и epmloyee содержат информацию о работниках больницы и пациентах соответственно.
-- В качестве работников больницы представлены doctor и nurse, у которых есть свои таблицы.
-- Таблица визитов содержит информацию о приеме паицентов врачами и причинах визитов пациентов.
-- У пациента есть своя медицинская карта, которая представлена таблицей medical_card. Там содержится история болезни пациента.
-- Таблица disease содержит информацию о болезнях.
-- В таблице prescription сожержится рецепт, который выписал доктор больному.
-- Таблица drug содержит информацию о лекарствах.
-- Таблица room содержит информацию о комнатах для больных.
-- Таблица room_patient содержит информацию о том, какие пациенты лежат в каких комнатах.




-- Создаем таблицы.

-- Таблица людей
CREATE TABLE people (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  first_name VARCHAR(100) NOT NULL COMMENT "Имя",
  last_name VARCHAR(100) NOT NULL COMMENT "Фамилия",
  sex VARCHAR(10) NOT NULL COMMENT "Пол",
  phone VARCHAR(100) NOT NULL UNIQUE COMMENT "Телефон",
  address VARCHAR(200) NOT NULL COMMENT "Адрес",
  age INT UNSIGNED COMMENT "Возраст",
  polis_number INT UNSIGNED NOT NULL UNIQUE COMMENT "Номер полиса",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Люди";  


-- Таблица пациентов
CREATE TABLE patient (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  admission_date DATETIME COMMENT "Время поступления в больницу",
  discharge_date DATETIME COMMENT "Время выписки из больницы",
  polis_number INT UNSIGNED NOT NULL UNIQUE COMMENT "Номер полиса",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Пациенты";  


-- Таблица работников
CREATE TABLE employee(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  start_date DATETIME COMMENT "Дата поступления на работу",
  end_date DATETIME COMMENT "Дата увольнения",
  polis_number INT UNSIGNED NOT NULL UNIQUE COMMENT "Номер полиса",
  description TEXT NOT NULL COMMENT "Описание работника",
  experience INT UNSIGNED COMMENT "Опыт работы в годах",
  salary DECIMAL(6,2) NOT NULL COMMENT "Зарплата",
  email VARCHAR(100) NOT NULL UNIQUE COMMENT "Почта",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Работники";  


-- Таблица комнат
CREATE TABLE room(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  room_floor INT UNSIGNED COMMENT "Этаж комнаты",
  room_department VARCHAR(100) NOT NULL COMMENT "Отделение",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Комнаты";  


-- Таблица комнат с пациентами
CREATE TABLE room_patient(
  room_id INT UNSIGNED COMMENT "ID комнаты", 
  patient_id INT UNSIGNED COMMENT "ID пациента",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки"
) COMMENT "Комнаты с пациентами";  


-- Таблица докторов
CREATE TABLE doctor(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  employee_id INT UNSIGNED NOT NULL UNIQUE COMMENT "ID работника",
  speciality TEXT NOT NULL COMMENT "Специальность",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Докторы";  


-- Таблица медсестер
CREATE TABLE nurse(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки", 
  employee_id INT UNSIGNED NOT NULL UNIQUE COMMENT "ID работника",
  speciality TEXT NOT NULL COMMENT "Специальность",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",  
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Медсестры";  


-- Таблица медицинской карточки пациента
CREATE TABLE medical_card(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  patient_id INT UNSIGNED NOT NULL UNIQUE COMMENT "ID пациента",
  allergy VARCHAR(100) NOT NULL COMMENT 'Есть ли аллергия у пациента',
  past_illness VARCHAR(100) NOT NULL COMMENT 'Перенесенные заболевания пациента',
  symptoms VARCHAR(100) NOT NULL COMMENT 'Симптоматика пациента',
  disease_id INT UNSIGNED COMMENT "ID болезни",
  diagnosis VARCHAR(100) NOT NULL COMMENT 'Диагноз пациента',
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Карта пациента";  


-- Таблица рецептов
CREATE TABLE prescription(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  patient_id INT UNSIGNED NOT NULL UNIQUE COMMENT "ID пациента",
  drug_id INT UNSIGNED NULL COMMENT "ID лекарства",
  quantity INT UNSIGNED COMMENT "Количество", 
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Лекарства пациента";  


-- Таблица лекарств
CREATE TABLE drug(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  name VARCHAR(10) NOT NULL COMMENT "Название",
  description TEXT NOT NULL COMMENT "Описание лекарства",
  price INT UNSIGNED COMMENT "Цена",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Лекарства";  


-- Таблица приемов
CREATE TABLE visit(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  date_visit DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время визита",
  patient_id INT UNSIGNED COMMENT "ID пациента",
  employee_id INT UNSIGNED COMMENT "ID работника",
  reason_for_visit TEXT NOT NULL COMMENT "Причина визита",
  name VARCHAR(10) NOT NULL COMMENT "Имя пациента",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Лекарства";  


-- Таблица болезней
CREATE TABLE disease(
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT "Идентификатор строки",
  name VARCHAR(10) NOT NULL COMMENT "Название",
  description TEXT NOT NULL COMMENT "Описание болезни",
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT "Время создания строки",
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT "Время обновления строки"
) COMMENT "Болезни";  


-- Схема базы данных представлена в scheme.png



-- Создаем все необходимые внешние ключи и диаграмму отношений.

ALTER TABLE patient
  ADD CONSTRAINT patient_polis_people_fk
  FOREIGN KEY (polis_number) REFERENCES people(polis_number)
  ON DELETE CASCADE;

ALTER TABLE employee
  ADD CONSTRAINT employee_polis_people_fk
  FOREIGN KEY (polis_number) REFERENCES people(polis_number)
  ON DELETE CASCADE;

ALTER TABLE room_patient
  ADD CONSTRAINT room_pat_id_fk
  FOREIGN KEY (room_id) REFERENCES room(id)
  ON DELETE CASCADE;

ALTER TABLE room_patient
  ADD CONSTRAINT patient_room_id_fk
  FOREIGN KEY (patient_id) REFERENCES patient(id)
  ON DELETE CASCADE;

ALTER TABLE doctor
  ADD CONSTRAINT doc_emp_id_fk
  FOREIGN KEY (employee_id) REFERENCES employee(id)
  ON DELETE CASCADE;

ALTER TABLE nurse
  ADD CONSTRAINT nur_emp_id_fk
  FOREIGN KEY (employee_id) REFERENCES employee(id)
  ON DELETE CASCADE;

ALTER TABLE visit
  ADD CONSTRAINT vis_emp_id_fk
  FOREIGN KEY (employee_id) REFERENCES employee(id)
  ON DELETE CASCADE,
  ADD CONSTRAINT vis_pat_id_fk
  FOREIGN KEY (patient_id) REFERENCES patient(id)
  ON DELETE CASCADE;

ALTER TABLE medical_card
  ADD CONSTRAINT medcard_pat_id_fk
  FOREIGN KEY (patient_id) REFERENCES patient(id)
  ON DELETE CASCADE;

ALTER TABLE prescription
  ADD CONSTRAINT drugfor_pat_id_fk
  FOREIGN KEY (patient_id) REFERENCES patient(id)
  ON DELETE CASCADE;

ALTER TABLE prescription
   ADD CONSTRAINT drug_id_fk
   FOREIGN KEY (drug_id) REFERENCES drug(id)
   ON DELETE SET NULL;

ALTER TABLE medical_card
  ADD CONSTRAINT disease_id_fk 
  FOREIGN KEY (disease_id) REFERENCES disease(id)
  ON DELETE SET NULL;



-- Создаем индексы

-- Ищут людей по имени и фамилии
CREATE INDEX first_last_name_idx ON people(first_name, last_name);

-- Часто ищут людей по телефону или email
CREATE INDEX people_phone_idx ON people(phone);

-- Ищут работников по email
CREATE INDEX employee_email_idx ON employee(email);

-- Ищут пациентов по полису
CREATE INDEX polis_patient_idx ON people(polis_number);

-- Часто ищут название лекарства
CREATE INDEX drug_name_idx ON drug(name);

-- Часто ищут диагноз пациента
CREATE INDEX diagnosis_pat_idx ON medical_card(diagnosis);

-- Часто ищут название болезни
CREATE INDEX disease_name_idx ON disease(name);




-- Скрипт наполнения данными называется fulldb.sql




-- SQL запросы для выборок данных

-- Вывести доктора c id = 1
SELECT people.first_name, people.last_name, d.speciality FROM people JOIN employee as e
	ON e.polis_number = people.polis_number JOIN doctor as d ON d.employee_id = e.id 
	WHERE d.id = 1;

-- Ответ в query1


-- Посчитать среднюю зарплату медсестер
select AVG(employee.salary) as average_nurse_salary from employee 
	join nurse as n on n.employee_id = employee.id 
	group by n.speciality order by average_nurse_salary;

-- Ответ в query2


-- Посчитать среднюю зарплату докторов
select AVG(employee.salary) as average_doctor_salary from employee 
	join doctor as d on d.employee_id = employee.id 
	group by d.speciality order by average_doctor_salary desc;

-- Ответ в query3


-- Вывести количество визитов каждого доктора
select first_name, last_name, count(v.id) as total_visits from visit v
	join (select d.employee_id as idd, first_name, last_name, d.speciality from people join 
	employee e on e.polis_number = people.polis_number join doctor d on d.employee_id = e.id) as subquery1 on 
	subquery1.idd = v.employee_id 
group by first_name, last_name
order by total_visits;

-- Ответ в query4






-- Создадим представления

-- Выведем пациентов с диагнозами
create or replace view patients_view(first_name, last_name, diagnosis) as 
select people.first_name, people.last_name, md.diagnosis from people 
join patient as p on p.polis_number = people.polis_number join medical_card
as md on md.patient_id = p.id;

select * from patients_view;

-- Ответ в view1


-- Выведем пациентов с причинами визита
create or replace view visits_view(first_name, last_name, reason) as 
select people.first_name, people.last_name, v.reason_for_visit from people 
join patient as p on p.polis_number = people.polis_number 
join visit as v on v.patient_id = p.id;

select * from visits_view;

-- Ответ в view2



-- Создадим хранимые процедуры (функции) и тригеры


-- Функция выводит должность специалиста взависимости от стажа
DELIMITER //

DROP FUNCTION IF EXISTS emp_exp//
CREATE FUNCTION emp_exp(value INT) RETURNS TEXT DETERMINISTIC
BEGIN	
  RETURN CASE
      WHEN value >= 1 AND value < 3 THEN "Начинающий специалист"
      WHEN value >= 3  AND value < 5 THEN "Специалист"
      WHEN value >= 5 AND value < 10 THEN "Старший специалист"
      ELSE "Заведующий"
    END;
END //


DELIMITER ;

SELECT hospital.emp_exp(2);

-- Ответ в function1



-- Процедура, который помещает в таблицу drug сто записей.

DELIMITER //

DROP PROCEDURE IF EXISTS procedure_2//
CREATE PROCEDURE procedure_2()
BEGIN
   DECLARE count INT DEFAULT 0;
   WHILE count < 100 DO
      SET count = count + 1;
      INSERT INTO drug (name, description, price) VALUES
        (CONCAT('Drug № ', count), CONCAT('Description for Drug № ', count), FLOOR(RAND()*(1000-10)+10));
   END WHILE;
END//


call procedure_2();

-- Ответ в function2



-- Тригер, предупреждающий о NULL значениях в обоих полях таблицы people
DROP TRIGGER IF EXISTS trigger_1;
delimiter //
CREATE TRIGGER trigger_1 BEFORE INSERT ON people
FOR EACH ROW
BEGIN
	IF(ISNULL(NEW.first_name) AND ISNULL(NEW.last_name)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Trigger Warning! NULL in both fields!';
	END IF;
END //
delimiter ;

INSERT INTO people (first_name, last_Name, sex, phone, address, age, polis_number)
VALUES (NULL, NULL, "f", 89215445654, "street 1, house 2", 23, 3453); 

-- Ответ в trigger1

-- Тригер, заполняющий NULL значение в в поле speciality таблицы doctor
DROP TRIGGER IF EXISTS trigger_2;
delimiter //
CREATE TRIGGER trigger_2 BEFORE INSERT ON doctor
FOR EACH ROW
BEGIN
	IF(ISNULL(NEW.speciality)) 
		THEN SET NEW.speciality = 'Therapist';
	END IF;
END //

INSERT INTO doctor (employee_id, speciality)
VALUES (51, NULL); 

select * from doctor where employee_id = 51

-- Ответ в trigger2


-- Создадим таблицу logs типа Archive. При каждом создании записи в таблицах doctor и nurse 
-- в таблицу logs помещается время и дата создания записи, название таблицы, идентификатор первичного ключа и 
-- содержимое поля description.

CREATE TABLE logs (
  table_name VARCHAR(20) NOT NULL,
  id INT UNSIGNED NOT NULL,
  description VARCHAR(255),
  created_at DATETIME DEFAULT NOW()
) ENGINE=ARCHIVE;

CREATE TRIGGER doctor_log AFTER INSERT ON doctor FOR EACH ROW
  INSERT INTO logs 
    SET 
      table_name = 'doctor',
      id = NEW.id,
      description = NEW.speciality;

CREATE TRIGGER nurse_log AFTER INSERT ON nurse FOR EACH ROW
  INSERT INTO logs 
    SET 
      table_name = 'nurse',
      id = NEW.id,
      description = NEW.speciality;

INSERT INTO doctor (employee_id, speciality)
VALUES (52, "Cardiolog");

INSERT INTO nurse (employee_id, speciality)
VALUES (51, "Head nurse");

select * from logs

-- Ответ в trigger3
