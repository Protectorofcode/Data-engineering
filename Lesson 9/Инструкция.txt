-- Транзакции, переменные, представления. Администрирование. Хранимые процедуры и функции, триггеры



-- Транзакции, переменные, представления.

-- 1. В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных. 
-- Переместите запись id = 1 из таблицы shop.users в таблицу sample.users. Используйте транзакции.

-- Вместо БД shop используется БД example.

use sample

DROP TABLE IF EXISTS users;
CREATE TABLE users(
	id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(45) NOT NULL,
	birthday_at DATE DEFAULT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (1, 'Jamie', '1982-11-13 10:12:00', '2018-11-13 10:12:00', '2011-05-15 13:50:03');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (2, 'Precious', '1971-11-13 10:12:00', '2020-10-26 12:39:27', '2012-01-25 22:40:15');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (3, 'Carli', '1988-11-13 10:12:00', '2014-01-24 14:39:41', '2018-06-17 13:42:26');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (4, 'Joanie', '1981-11-13 10:12:00', '2019-12-10 18:29:09', '2012-01-20 15:08:20');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (5, 'Pietro', '1998-11-16 10:12:00', '2015-06-22 01:12:13', '2017-06-27 03:56:09');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (6, 'Ezequiel', '2001-11-13 10:12:00', '2015-12-25 23:06:04', '2012-12-13 03:08:00');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (7, 'Eloise', '1965-11-13 10:12:00', '2019-11-15 12:59:58', '2017-09-22 00:01:08');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (8, 'Ali', '2000-11-13 10:12:00', '2017-04-04 04:52:49', '2020-12-19 06:05:43');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (9, 'Nathaniel', '1999-11-13 10:12:00', '2015-02-08 03:21:55', '2012-10-19 06:24:23');
INSERT INTO `users` (`id`, `name`, `birthday_at`, `created_at`, `updated_at`) VALUES (10, 'Evelyn', '1996-11-13 10:12:00', '2011-12-12 09:18:49', '2015-04-08 12:03:06');

SELECT * FROM users;

-- Ответ показан в 1_1.png

START TRANSACTION;
REPLACE INTO sample.users SELECT * FROM example.users WHERE id = 1;
COMMIT;

SELECT * FROM users;

-- Ответ показан в 1_2.png




-- 2. Создайте представление, которое выводит название name товарной позиции из таблицы products и 
-- соответствующее название каталога name из таблицы catalogs.

CREATE OR REPLACE VIEW prods_view(prod_id, prod_name, cat_name) AS
SELECT p.id AS prod_id, p.name, cat.name
FROM products AS p
LEFT JOIN catalogs AS cat 
ON p.catalog_id = cat.id;


SELECT * FROM prods_view;

-- Ответ показан в 2.png





-- 3. (по желанию) Пусть имеется таблица с календарным полем created_at.
-- В ней размещены разряженые календарные записи за август 2018 года:
-- '2018-08-01', '2016-08-04', '2018-08-16' и 2018-08-17
-- Составьте запрос, который выводит полный список дат за август,
-- выставляя в соседнем поле значение 1, если дата присутствует в исходном таблице и 0,
-- если она отсутствует.


DROP TABLE IF EXISTS date_table;
CREATE TABLE date_table (
	created_at DATE
);

INSERT INTO date_table VALUES
	('2018-08-01'),
	('2018-08-04'),
	('2018-08-16'),
	('2018-08-17');

SELECT * FROM date_table ORDER BY created_at;

-- доделаю позже
...






-- Транзакции, переменные, представления.

-- 1. Создайте двух пользователей которые имеют доступ к базе данных shop.
-- Первому пользователю shop_read должны быть доступны только запросы на чтение данных,
-- второму пользователю shop — любые операции в пределах базы данных shop.

DROP USER IF EXISTS 'shop_reader'@'localhost';
CREATE USER 'shop_reader'@'localhost' IDENTIFIED WITH sha256_password BY '123';
GRANT SELECT ON shop_online.* TO 'shop_reader'@'localhost';

INSERT INTO catalogs(name)
VALUES('New_name');
SELECT * FROM catalogs;

-- Ответ показан в admin_1.png


DROP USER IF EXISTS 'shop'@'localhost';
CREATE USER 'shop'@'localhost' IDENTIFIED WITH sha256_password BY '123';
GRANT ALL ON shop_online.* TO 'shop'@'localhost';
GRANT GRANT OPTION ON shop_online.* TO 'shop'@'localhost';

INSERT INTO catalogs(name)
VALUES('New name');
SELECT * FROM catalogs;

-- Ответ показан в admin_2.png







-- Хранимые процедуры и функции, триггеры

-- 1. Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени суток. 
-- С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна возвращать фразу "Добрый день", 
-- с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".

DELIMITER //

DROP FUNCTION IF EXISTS hello//
CREATE FUNCTION hello() RETURNS TEXT DETERMINISTIC
BEGIN
  RETURN CASE
      WHEN "06:00" <= CURTIME() AND CURTIME() < "12:00" THEN "Доброе утро"
      WHEN "12:00" <= CURTIME() AND CURTIME() < "18:00" THEN "Добрый День"
      WHEN "18:00" <= CURTIME() AND CURTIME() < "00:00" THEN "Добрый вечер"
      ELSE "Доброй ночи"
    END;
END //

DELIMITER ;

SELECT example.hello();

-- Ответ показан в procedure_1.png



-- 2.В таблице products есть два текстовых поля: name с названием товара и description с его описанием. 
-- Допустимо присутствие обоих полей или одно из них. 
-- Ситуация, когда оба поля принимают неопределенное значение NULL неприемлема. 
-- Используя триггеры, добейтесь того, чтобы одно из этих полей или оба поля были заполнены. 
-- При попытке присвоить полям NULL-значение необходимо отменить операцию.


DROP TRIGGER IF EXISTS trigger_1;
delimiter //
CREATE TRIGGER trigger_1 BEFORE INSERT ON products
FOR EACH ROW
BEGIN
	IF(ISNULL(NEW.name) AND ISNULL(NEW.desription)) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Trigger Warning! NULL in both fields!';
	END IF;
END //
delimiter ;

INSERT INTO products (name, desription, price, catalog_id)
VALUES (NULL, NULL, 1000, 1); 

-- Ответ показан в procedure_2_1.png


INSERT INTO products (name, desription, price, catalog_id)
VALUES ("GeForce 1660 super", NULL, 15000, 2);

INSERT INTO products (name, desription, price, catalog_id)
VALUES ("GeForce 2080", "Видеокарта", 15000, 2);

select * from products





