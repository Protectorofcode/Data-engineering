-- Работаем с БД vk и тестовыми данными, которые вы сгенерировали ранее:


-- 1. Создать и заполнить таблицы лайков и постов.

-- Таблица лайков
DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type_id INT UNSIGNED NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);


-- Таблица типов лайков
DROP TABLE IF EXISTS target_types;
CREATE TABLE target_types (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL UNIQUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);


INSERT INTO target_types (name) VALUES 
  ('messages'),
  ('users'),
  ('media'),
  ('posts');


-- Заполняем лайки
INSERT INTO likes 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 100)),
    FLOOR(1 + (RAND() * 4)),
    CURRENT_TIMESTAMP 
  FROM messages;


-- Создадим таблицу постов
CREATE TABLE posts (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  community_id INT UNSIGNED,
  head VARCHAR(255),
  body TEXT NOT NULL,
  media_id INT UNSIGNED,
  is_public BOOLEAN DEFAULT TRUE,
  is_archived BOOLEAN DEFAULT FALSE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);






--2. Создать все необходимые внешние ключи и диаграмму отношений.


ALTER TABLE profiles
    CHANGE COLUMN country_id country_id int unsigned NULL;

-- Добавляем внешние ключи
ALTER TABLE profiles
  ADD CONSTRAINT profiles_user_id_fk
  FOREIGN KEY (user_id) REFERENCES users(id)
  ON DELETE CASCADE,
  ADD CONSTRAINT profiles_photo_id_fk
  FOREIGN KEY (photo_id) REFERENCES media(id)
  ON DELETE SET NULL;

ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
  FOREIGN KEY (from_user_id) REFERENCES users(id),
  ADD CONSTRAINT messages_to_user_id_fk 
  FOREIGN KEY (to_user_id) REFERENCES users(id);

ALTER TABLE cities
    CHANGE COLUMN name name VARCHAR(130) NULL;

ALTER TABLE profiles
  ADD CONSTRAINT status_user_id_fk 
  FOREIGN KEY (status_id) REFERENCES user_statuses(id)
  ON DELETE SET NULL;

ALTER TABLE profiles
  ADD CONSTRAINT country_id_fk 
  FOREIGN KEY (country_id) REFERENCES countries(id)
  ON DELETE SET NULL;

ALTER TABLE friendship
  ADD CONSTRAINT friendship_id_fk 
  FOREIGN KEY (status_id) REFERENCES friendship_statuses(id)
  ON DELETE CASCADE;

ALTER TABLE friendship 
  ADD CONSTRAINT friendship_user_id_fk
  FOREIGN KEY (user_id) REFERENCES users(id),
  ADD CONSTRAINT friendship_friend_id_fk
  FOREIGN KEY (friend_id) REFERENCES users(id);

ALTER TABLE communities_users
  ADD CONSTRAINT user_community_id_fk
  FOREIGN KEY (user_id) REFERENCES users(id)
  ON DELETE CASCADE;

ALTER TABLE communities_users
  ADD CONSTRAINT community_user_id_fk
  FOREIGN KEY (community_id) REFERENCES communities(id)
  ON DELETE CASCADE;

ALTER TABLE media
  ADD CONSTRAINT media_type_id_fk 
  FOREIGN KEY (media_type_id) REFERENCES media_types(id);

ALTER TABLE likes
  ADD CONSTRAINT like_type_id_fk 
  FOREIGN KEY (target_type_id) REFERENCES target_types(id)
  ON DELETE CASCADE;

ALTER TABLE users_media
  ADD CONSTRAINT user_media_id_fk
  FOREIGN KEY (user_id) REFERENCES users(id)
  ON DELETE CASCADE;

ALTER TABLE users_media
  ADD CONSTRAINT media_user_id_fk
  FOREIGN KEY (media_id) REFERENCES media(id)
  ON DELETE CASCADE;

ALTER TABLE likes
  ADD CONSTRAINT like_user_id_fk 
  FOREIGN KEY (user_id) REFERENCES users(id);

ALTER TABLE posts
  ADD CONSTRAINT post_user_id_fk 
  FOREIGN KEY (user_id) REFERENCES users(id)
  ON DELETE SET NULL;


--Схема показана в файле scheme.png



-- 3. Определить кто больше поставил лайков (всего) - мужчины или женщины?

SELECT IF(
	(SELECT COUNT(id) FROM likes where user_id IN (
		SELECT id FROM profiles where gender = "m")
	) >
	(SELECT COUNT(id) FROM likes where user_id IN (
		SELECT id FROM profiles where gender = "f")
	), 'male', 'female');

--Результат показан в файле 3.png




-- 4. Подсчитать количество лайков которые получили 10 самых молодых пользователей.

SELECT COUNT(id) from likes WHERE user_id IN (
	SELECT * FROM (
		SELECT user_id from profiles ORDER BY birthday DESC LIMIT 10) as b_day
); 

--Результат показан в файле 4.png






-- 5. Найти 10 пользователей, которые проявляют наименьшую активность в
-- использовании социальной сети
-- (критерии активности необходимо определить самостоятельно).

--Критерий активности может быть как количество лайков

SELECT user_id, COUNT(*) as like_count FROM likes
GROUP BY user_id 
ORDER BY like_count LIMIT 10

--Результат показан в файле 5_1.png


--Или критерий активности может быть количество сообщений
SELECT from_user_id, COUNT(*) as messages_count FROM messages
GROUP BY from_user_id 
ORDER BY messages_count LIMIT 10;

--Результат показан в файле 5_2.png